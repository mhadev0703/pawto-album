"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.diffUnknown = exports.diffResource = exports.diffParameter = exports.diffOutput = exports.diffMetadata = exports.diffMapping = exports.diffCondition = exports.diffAttribute = void 0;
const types = require("./types");
const util_1 = require("./util");
function diffAttribute(oldValue, newValue) {
    return new types.Difference(_asString(oldValue), _asString(newValue));
}
exports.diffAttribute = diffAttribute;
function diffCondition(oldValue, newValue) {
    return new types.ConditionDifference(oldValue, newValue);
}
exports.diffCondition = diffCondition;
function diffMapping(oldValue, newValue) {
    return new types.MappingDifference(oldValue, newValue);
}
exports.diffMapping = diffMapping;
function diffMetadata(oldValue, newValue) {
    return new types.MetadataDifference(oldValue, newValue);
}
exports.diffMetadata = diffMetadata;
function diffOutput(oldValue, newValue) {
    return new types.OutputDifference(oldValue, newValue);
}
exports.diffOutput = diffOutput;
function diffParameter(oldValue, newValue) {
    return new types.ParameterDifference(oldValue, newValue);
}
exports.diffParameter = diffParameter;
function diffResource(oldValue, newValue) {
    const resourceType = {
        oldType: oldValue && oldValue.Type,
        newType: newValue && newValue.Type,
    };
    let propertyDiffs = {};
    let otherDiffs = {};
    if (resourceType.oldType !== undefined && resourceType.oldType === resourceType.newType) {
        // Only makes sense to inspect deeper if the types stayed the same
        const impl = (0, util_1.loadResourceModel)(resourceType.oldType);
        propertyDiffs = (0, util_1.diffKeyedEntities)(oldValue.Properties, newValue.Properties, (oldVal, newVal, key) => _diffProperty(oldVal, newVal, key, impl));
        otherDiffs = (0, util_1.diffKeyedEntities)(oldValue, newValue, _diffOther);
        delete otherDiffs.Properties;
    }
    return new types.ResourceDifference(oldValue, newValue, {
        resourceType, propertyDiffs, otherDiffs,
    });
    function _diffProperty(oldV, newV, key, resourceSpec) {
        let changeImpact = types.ResourceImpact.NO_CHANGE;
        const spec = resourceSpec?.properties?.[key];
        if (spec && !(0, util_1.deepEqual)(oldV, newV)) {
            switch (spec.causesReplacement) {
                case 'yes':
                    changeImpact = types.ResourceImpact.WILL_REPLACE;
                    break;
                case 'maybe':
                    changeImpact = types.ResourceImpact.MAY_REPLACE;
                    break;
                default:
                    // In those cases, whatever is the current value is what we should keep
                    changeImpact = types.ResourceImpact.WILL_UPDATE;
            }
        }
        return new types.PropertyDifference(oldV, newV, { changeImpact });
    }
    function _diffOther(oldV, newV) {
        return new types.Difference(oldV, newV);
    }
}
exports.diffResource = diffResource;
function diffUnknown(oldValue, newValue) {
    return new types.Difference(oldValue, newValue);
}
exports.diffUnknown = diffUnknown;
/**
 * Coerces a given value to +string | undefined+.
 *
 * @param value the value to be coerced.
 *
 * @returns +undefined+ if +value+ is +null+ or +undefined+,
 *      +value+ if it is a +string+,
 *      a compact JSON representation of +value+ otherwise.
 */
function _asString(value) {
    if (value == null) {
        return undefined;
    }
    if (typeof value === 'string') {
        return value;
    }
    return JSON.stringify(value);
}
//# sourceMappingURL=data:application/json;base64,